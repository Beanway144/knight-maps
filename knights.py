from PIL import Image
BGC = (255, 255, 255) #Background color is white
image = Image.new(mode = "RGB",
                      size = (2000, 2000),
                      color = BGC)
pixels = image.load()
BOARD_WIDTH = image.size[0]
BOARD_HEIGHT = image.size[1]
START = (BOARD_WIDTH//2, BOARD_HEIGHT//2)
DEPTH = 50



contrast = [(38,10,3), (100,13,19), (172,40,49), (227,98,23), (188,128,52), (100, 110, 120), (128,12,17), (144,49,60), (95,14,63), (17,76,92)]

# Given square : (x, y) with xjump yjump : Int, return list of squares knight can move to in one jump
def getKnightSquares(square, xjump, yjump):
    l = []
    (x, y) = square
    for i in [1, -1]:
        for j in [-1, 1]:
            if (0 <= x + i * xjump < BOARD_WIDTH and 0 <= y + j * yjump < BOARD_HEIGHT):
                l.append((x + i * xjump, y + j * yjump))
            if (0 <= x + i * yjump < BOARD_WIDTH and 0 <= y + j * xjump < BOARD_HEIGHT):
                l.append((x + i * yjump, y + j * xjump))
    return l

def fib(x):
    if x < 2: return 1
    else: return fib(x-1) + fib(x-2)

#Given list of squares, turn m, xjump yjump, colors pixels based on turn
def possibleKnightSquares(listPixels, m, xjump, yjump):
    newSquares = []
    for p in listPixels:
        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
        euler = [1, 1, 2, 2, 4, 2, 6, 4, 6, 4, 10, 4, 12, 6, 8, 8, 16, 6, 18, 8, 12, 10, 22, 8, 20, 12, 18, 12, 28, 8, 30, 16, 20, 16, 24, 12, 36, 18, 24, 16, 40, 12, 42, 20, 24, 22, 46, 16, 42, 20, 32, 24, 52, 18, 40, 24, 36, 28, 58, 16, 60, 30, 36, 32, 48, 20, 66, 32, 44 ]
        groups = [0, 1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51, 1, 2, 1, 14, 1, 2, 2, 14, 1, 6, 1, 4, 2, 2, 1, 52, 2, 5, 1, 5, 1, 15, 2, 13, 2, 2, 1, 13, 1, 2, 4, 267, 1, 4, 1, 5, 1, 4, 1, 50, 1, 2, 3, 4, 1, 6, 1, 52, 15, 2, 1, 15, 1, 2, 1, 12, 1, 10, 1, 4, 2]
        prim =[1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 3, 2, 2, 4, 2, 2, 4, 2, 3, 4, 4, 2, 3, 4, 2, 6, 3, 2, 6, 4, 3, 4, 4, 4, 6, 4, 2, 6, 4, 4, 8, 4, 3, 6, 4, 4, 5, 4, 4, 6, 6, 4, 6, 6, 4, 8, 4, 2, 9, 4, 6, 8, 4, 4, 8, 8, 3, 8, 8, 4, 7, 4, 4, 10, 6, 6, 8, 4, 5, 8, 6, 4, 9, 8, 4, 10, 6, 4, 12, 8, 6, 6, 4, 8, 8, 8, 4, 8, 6, 4]
        tau = [1, 2, 2, 3, 2, 4, 2, 4, 3, 4, 2, 6, 2, 4, 4, 5, 2, 6, 2, 6, 4, 4, 2, 8, 3, 4, 4, 6, 2, 8, 2, 6, 4, 4, 4, 9, 2, 4, 4, 8, 2, 8, 2, 6, 6, 4, 2, 10, 3, 6, 4, 6, 2, 8, 4, 8, 4, 4, 2, 12, 2, 4, 6, 7, 4, 8, 2, 6, 4, 8, 2, 12, 2, 4, 6, 6, 4, 8, 2, 10, 5, 4, 2, 12, 4, 4, 4, 8, 2, 12, 4, 6, 4, 4, 4, 12, 2, 6, 6, 9, 2, 8, 2, 8]
        cents = [1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 11, 12, 15, 16, 19, 22, 25, 28, 31, 34, 40, 43, 49, 52, 58, 64, 70, 76, 82, 88, 98, 104, 114, 120, 130, 140, 150, 160, 170, 180, 195, 205, 220, 230, 245, 260, 275, 290, 305, 320, 341, 356, 377, 392, 413, 434, 455, 476, 497, 518, 546]
        pal = [0, 2, 4, 6, 8, 11, 33, 55, 77, 99, 11, 22, 33, 44, 55, 66, 77, 88, 99, 121, 22, 33, 44, 55, 66, 77, 88, 99, 121, 121, 33, 44, 55, 66, 77, 88, 99, 121, 121, 363, 44, 55, 66, 77, 88, 99, 121, 121, 363, 484, 55, 66, 77, 88, 99, 121, 121, 363, 484, 1111, 66, 77, 88, 99, 121]
        evf = [1, 4, 6, 9, 10, 14, 15, 16, 21, 22, 24, 25, 26, 33, 34, 35, 36, 38, 39, 40, 46, 49, 51, 54, 55, 56, 57, 58, 60, 62, 64, 65, 69, 74, 77, 81, 82, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 100, 104, 106, 111, 115, 118, 119, 121, 122, 123, 126, 129, 132, 133, 134]
        fib = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, ]
        lucas = [2, 1, 3, 4, 7, 11, 18, 29, 47, 76, 123, 199, 322, 521, 843, 1364, 2207, 3571, 5778, 9349, 15127, 24476, 39603, 64079, 103682, 167761, 271443, 439204, 710647, 1149851, 1860498, 3010349, 4870847, 7881196, 12752043, 20633239, 33385282, 54018521, 87403803]
        trib = [1, 1, 1, 3, 5, 9, 17, 31, 57, 105, 193, 355, 653, 1201, 2209, 4063, 7473, 13745, 25281, 46499, 85525, 157305, 289329, 532159, 978793, 1800281, 3311233, 6090307, 11201821, 20603361, 37895489, 69700671, 128199521, 235795681, 433695873, 797691075, 1467182629]
        trib2 = [0, 1, 0, 1, 2, 3, 6, 11, 20, 37, 68, 125, 230, 423, 778, 1431, 2632, 4841, 8904, 16377, 30122, 55403, 101902, 187427, 344732, 634061, 1166220, 2145013, 3945294, 7256527, 13346834, 24548655, 45152016, 83047505, 152748176, 280947697, 516743378, 950439251]
        squaresOfX = getKnightSquares(p, 1, fib[m]) 
        for x in squaresOfX:
            if (pixels[x] == BGC):
                pixels[x] = (0, 150 - 150//(DEPTH) * m, 255//(DEPTH) * m) #contrast[m % len(contrast)]
                newSquares.append(x)
    return newSquares


def run(xjump, yjump):
    currentSquares = possibleKnightSquares([START], 0, xjump, yjump)
    for i in range(1, DEPTH):
        currentSquares = possibleKnightSquares(currentSquares, i, xjump, yjump)

    print("complete")

run(6, 1)

image.show()

